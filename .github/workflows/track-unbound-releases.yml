name: Check for and upgrade to a new Unbound release
on:
#  schedule:
#    - cron: '0 0 * * *'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set env
        run: echo ::set-env name=NEW_UNBOUND_VERSION::$(echo ${GITHUB_REF:10})
      - name: Update the default Unbound VERSION Dockerfile arg value.
        run: |
          # Prepare to interact with the GitHub API using the pre-supplied credentials from GitHub Actions.
          DOCKERFILE_URL="https://api.github.com/repos/nlnetlabs/pythonunbound/contents/Dockerfile"
          AUTH_HEADER="Authorization: token ${GITHUB_TOKEN}"
          TMP_FILE=/tmp/$$.json

          # Get the current contents of the current version of the Dockerfile in the GitHub repo, and its git commit SHA.
          curl -s -X GET ${DOCKERFILE_URL} -H "${AUTH_HEADER}" -o ${TMP_FILE}
          FILE_SHA=$(cat ${TMP_FILE} | jq -r '.sha')
          CONTENT=$(cat ${TMP_FILE} | jq -r '.content' | base64 -d)

          # Extract the current Unbound version in use from the Dockerfile content.
          CURRENT_UNBOUND_VERSION=$(echo ${CONTENT} | grep -Eo '^ARG UNBOUND_VERSION=[0-9.]+' | cut -d '=' -f 2)

          # If different (assumed newer but am cowardly refusing to compare semantic version numbers):
          if [ "${CURRENT_UNBOUND_VERSION}" != "${NEW_UNBOUND_VERSION}" ]; then
            # Rewrite the file content to 'bump' the Unbound version number to the latest.
            NEW_CONTENT=$(echo $CONTENT | sed -e "s/^ARG UNBOUND_VERSION=.\\+/ARG UNBOUND_VERSION=${NEW_UNBOUND_VERSION}/" | base64 -w 0)

            # Push the updated file back into GitHub as a new commit.
            curl -s -X PUT $DOCKERFILE_URL -H "$AUTH_HEADER-d @- <<EOF
            {
              "message": "Updating from Unbound ${CURRENT_UNBOUND_VERSION} to Unbound ${NEW_UNBOUND_VERSION}.",
              "content": "${NEW_CONTENT}",
              "sha": "${FILE_SHA}"
            }
            EOF

            # TODO: verify the response
          fi

        shell: bash
